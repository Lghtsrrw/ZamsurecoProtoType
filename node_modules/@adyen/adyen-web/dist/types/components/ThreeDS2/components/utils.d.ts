import { ChallengeData, ChallengeToken, FingerPrintData, ResultObject } from '../types';
export interface ResolveData {
    data: {
        details: {
            [key: string]: string;
        };
        paymentData: string;
    };
}
export interface ErrorObject {
    errorCode: string;
    message: string;
}
export declare const decodeAndParseToken: (token: string) => ChallengeToken;
/**
 * @param value - requires an object containing the result parameters
 * @param type - either 'IdentifyShopper' or 'ChallengeShopper'
 * @returns encoded result
 */
export declare const encodeResult: (result: ResultObject, type: string) => string;
/**
 * Accepts a size string for the challenge window & returns it if it is valid else returns a default value
 * @param sizeStr - the size string to check the validity of
 * @returns a valid size string
 */
export declare const validateChallengeWindowSize: (sizeStr: string) => string;
/**
 * Accepts a size string for the challenge window & returns the corresponding array of w/h values
 * @param sizeStr -
 */
export declare const getChallengeWindowSize: (sizeStr: string) => string[];
/**
 *  prepareChallengeData
 *  @param value - requires an object containing the challenge parameters
 *  - challengeToken - challengeToken string received from payments call containing acsTransID, acsURL, messageVerison, expected postMessage URL and threeDSServerTransID
 *  - size - one of five possible challenge window sizes
 *  - notificationURL - the URL notifications are expected to be postMessaged from
 */
export declare const prepareChallengeData: ({ challengeToken, size, notificationURL }: {
    challengeToken: any;
    size: any;
    notificationURL: any;
}) => ChallengeData;
/**
 *  prepareFingerPrintData
 *   requires an object containing the challenge parameters
 *  @param fingerprintToken - fingerprintToken string received from payments call, containing
 *  methodNotificationURL, methodURL and threeDSServerTransID
 *  @param notificationURL - the URL notifications are expected to be postMessaged from
 */
export declare const prepareFingerPrintData: ({ fingerprintToken, notificationURL }: {
    fingerprintToken: any;
    notificationURL: any;
}) => FingerPrintData;
export declare const createResolveData: (dataKey: string, result: string, paymentData: string) => ResolveData;
export declare const handleErrorCode: (errorCode: string) => ErrorObject;
/**
 *
 * Takes a string and encodes it as a base64url string
 * (https://en.wikipedia.org/wiki/Base64#URL_applications)
 * (See also https://tools.ietf.org/html/rfc7515)
 *
 * @example
 * ```
 * const jsonStr = JSON.stringify( {name:'john', surname:'smith'} );
 * const base64url = encodeBase64URL(jsonStr);
 * ```
 *
 * @param dataStr - data, as a string, to be encoded
 *
 * @returns base64URL - a base64url encoded string
 */
export declare const encodeBase64URL: (dataStr: string) => string;
